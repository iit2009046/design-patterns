Visitor design pattern is one of the behavioral design patterns.
It is used when we have to perform an operation on a group of similar kind of Objects.
With the help of visitor pattern, we can move the operational logic from the objects to another class.

The visitor pattern consists of two parts:

a method called Visit() which is implemented by the visitor and is called for every element in the data structure
visitable classes providing Accept() methods that accept a visitor

Client : The Client class is a consumer of the classes of the visitor design pattern.
It has access to the data structure objects and can instruct them to accept a Visitor to perform the appropriate processing.

Visitor : This is an interface or an abstract class used to declare the visit operations for all the types of visitable classes.

ConcreteVisitor : For each type of visitor all the visit methods, declared in abstract visitor, must be implemented.
Each Visitor will be responsible for different operations.

Visitable : This is an interface which declares the accept operation.
This is the entry point which enables an object to be “visited” by the visitor object.

ConcreteVisitable : These classes implement the Visitable interface or class and defines the accept operation.
The visitor object is passed to this object using the accept operation.

Java libraries examples:

javax.lang.model.element.AnnotationValue and AnnotationValueVisitor
javax.lang.model.element.Element and ElementVisitor
javax.lang.model.type.TypeMirror and TypeVisitor
java.nio.file.FileVisitor and SimpleFileVisitor
javax.faces.component.visit.VisitContext and VisitCallback