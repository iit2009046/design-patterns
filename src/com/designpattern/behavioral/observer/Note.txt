The Observer Pattern defines a one to many dependency between objects so that one object changes state, all of its dependents are notified and updated automatically.

Explanation:

One to many dependency is between Subject(One) and Observer(Many).
There is dependency as Observers themselves donâ€™t have access to data. They are dependent on Subject to provide them data.




Java libraries examples:

java.util.Observer/java.util.Observable (rarely used in real world though)
All implementations of java.util.EventListener (practically all over Swing thus)
javax.servlet.http.HttpSessionBindingListener
javax.servlet.http.HttpSessionAttributeListener
javax.faces.event.PhaseListener
